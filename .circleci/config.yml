# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1
orbs:
  buildevents: honeycombio/buildevents@0.2.6

executors:
  linuxgo:
    working_directory: /go/src/github.com/chrislgardner/go-discord-bot
    machine:
      - image: circleci/classic:latest

commands:
  go-build:
    steps:
      ## method 1 to send a command span
      ## the raw buildevents binary is available in the $PATH but requires more arguments
      ## don't use CGO so that this binary can run in alpine-linux containers
      - run: |
          GOOS=linux \
          GOARCH=amd64 \
          CGO_ENABLED=0 \
          buildevents cmd $CIRCLE_WORKFLOW_ID $BUILDEVENTS_SPAN_ID go_build -- \
          go build -ldflags "-X main.Version=${CIRCLE_TAG}" \
          -o $GOPATH/bin/go-discord-bot \
          ./...

jobs:
  setup:
    executor: linuxgo
    steps:
      - buildevents/start_trace
  watch:
    executor: linuxgo
    steps:
      - buildevents/watch_build_and_finish

  test:
    executor: linuxgo
    steps:
      - buildevents/with_job_span:
          steps:
            - checkout
            ## method 2 to send a command span
            ## buildevent/berun is a circleci friendly way to create a buildevents command span
            - buildevents/berun:
                bename: go_test
                becommand: go test -v ./...
  build:
    executor: linuxgo
    steps:
      - buildevents/with_job_span:
          steps:
            - checkout
            - run: $ACR_PASSWORD | docker login halbarad.azurecr.io -u $ACR_USER --password-stdin
            - go-build:
            - run: mkdir -v artifacts; cp -v $GOPATH/bin/go-discord-bot artifacts/

            - run: echo "size=$(du -sb artifacts | cut -f 1)" >> $BASH_ENV
            - buildevents/add_context:
                field_name: artifacts_size_bytes
                field_value: $size

            ## build the docker container
            - run: |
                buildevents cmd $CIRCLE_WORKFLOW_ID $BUILDEVENTS_SPAN_ID docker_build -- \
                docker build . -t halbarad.azurecr.io/go/discord-bot:$CIRCLE_TAG
            
            ## push the docker container to ACR
            - run: |
                buildevents cmd $CIRCLE_WORKFLOW_ID $BUILDEVENTS_SPAN_ID docker_push -- \
                docker push halbarad.azurecr.io/go/discord-bot:$CIRCLE_TAG

workflows:
  build:
    jobs:
      - setup:
          filters:
            tags:
              only: /.*/
      - watch:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - test
          filters:
            tags:
              only: /.*/
